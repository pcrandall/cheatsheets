{"id":"../node_modules/onmount/index.js","dependencies":[{"name":"/app/package.json","includedInParent":true,"mtime":1598803809693},{"name":"/app/.babelrc","includedInParent":true,"mtime":1598803808957},{"name":"/app/node_modules/onmount/package.json","includedInParent":true,"mtime":1598805133603}],"generated":{"js":"var define;\n/* global define */\nvoid (function (root, factory) {\n  if (typeof define === 'function' && define.amd) define(factory)\n  else if (typeof exports === 'object') module.exports = factory()\n  else {\n    if (window.jQuery) window.jQuery.onmount = factory()\n    else root.onmount = factory()\n  }\n}(this, function ($) {\n  /*\n   * Internal: Registry.\n   */\n\n  var handlers, behaviors, selectors, log\n\n  /*\n   * Internal: IDs for auto-incrementing.\n   */\n\n  var bid = 0 /* behavior ID */\n  var cid = 0 /* component ID */\n\n  /**\n   * (Module) Adds a behavior, or triggers behaviors.\n   *\n   * When no parameters are passed, it triggers all behaviors. When one\n   * parameter is passed, it triggers the given behavior. Otherwise, it adds a\n   * behavior.\n   *\n   *     // define a behavior\n   *     $.onmount('.select-box', function () {\n   *       $(this).on('...')\n   *     })\n   *\n   *     // define a behavior with exit\n   *     $.onmount('.select-box', function () {\n   *       $(document).on('...')\n   *     }, function () {\n   *       $(document).off('...')\n   *     })\n   *\n   *     // retrigger a onmount\n   *     $.onmount('.select-box')\n   *\n   *     // retriggers all behaviors\n   *     $.onmount()\n   */\n\n  function onmount (selector, init, exit, options) {\n    if (typeof exit === 'object') {\n      options = exit\n      exit = undefined\n    }\n\n    if (arguments.length === 0 || isjQuery(selector) || isEvent(selector)) {\n      // onmount() - trigger all behaviors. Also account for cases such as\n      // $($.onmount), where it's triggered with a jQuery event object.\n      onmount.poll()\n    } else if (arguments.length === 1) {\n      // onmount(selector) - trigger for a given selector.\n      onmount.poll(selector)\n    } else {\n      // onmount(sel, fn, [fn]) - register a new behavior.\n      var be = new Behavior(selector, init, exit, options)\n      behaviors.push(be)\n      be.register()\n    }\n\n    return this\n  }\n\n  /*\n   * Use jQuery (or a jQuery-like) when available. This will allow\n   * the use of jQuery selectors.\n   */\n\n  onmount.$ = window.jQuery || window.Zepto || window.Ender\n\n  /*\n   * Detect MutationObserver support for `onmount.observe()`.\n   * You may even add a polyfill here via\n   * `onmount.MutationObserver = require('mutation-observer')`.\n   */\n\n  onmount.MutationObserver =\n    window.MutationObserver ||\n    window.WebKitMutationObserver ||\n    window.MozMutationObserver\n\n  /**\n   * Set this to true if you want to see debug messages.\n   */\n\n  onmount.debug = false\n\n  /**\n   * Internal: triggers behaviors for a selector or for all.\n   *\n   *     onmount.poll()\n   *     onmount.poll('.js-button')\n   */\n\n  onmount.poll = function poll (selector) {\n    if (selector) selector = onmount.selectify(selector)\n    var functions = (selector ? selectors[selector] : handlers) || []\n    each(functions, function (fn) { fn() })\n  }\n\n  /**\n   * Observes automatically using MutationObserver events.\n   *\n   *     onmount.observe()\n   */\n\n  onmount.observe = function observe () {\n    var MutationObserver = onmount.MutationObserver\n    if (typeof MutationObserver === 'undefined') return\n\n    var obs = new MutationObserver(function (mutations) {\n      each(behaviors, function (be) {\n        each(mutations, function (mutation) {\n          each(mutation.addedNodes, function (el) {\n            if (matches(el, be.selector)) be.visitEnter(el)\n          })\n\n          each(mutation.removedNodes, function (el) {\n            if (matches(el, be.selector)) be.doExit(el)\n          })\n        })\n      })\n    })\n\n    obs.observe(document, { subtree: true, childList: true })\n    onmount.observer = obs\n\n    // trigger everything before going\n    onmount()\n    return true\n  }\n\n  /**\n   * Turns off observation first issued by `onmount.observe()`.\n   */\n\n  onmount.unobserve = function unobserve () {\n    if (!this.observer) return\n    this.observer.disconnect()\n    delete this.observer\n  }\n\n  /**\n   * Forces teardown of all behaviors currently applied.\n   */\n\n  onmount.teardown = function teardown () {\n    each(behaviors, function (be) {\n      each(be.loaded, function (el, i) {\n        if (el) be.doExit(el, i)\n      })\n    })\n  }\n\n  /**\n   * Clears all behaviors. Useful for tests.\n   * This will NOT call exit handlers.\n   */\n\n  onmount.reset = function reset () {\n    handlers = onmount.handlers = []\n    selectors = onmount.selectors = {}\n    behaviors = onmount.behaviors = []\n  }\n\n  /**\n   * Internal: Converts `@role` to `[role~=\"role\"]` if needed. You can override\n   * this by reimplementing `onmount.selectify`.\n   *\n   *     selectify('@hi')   //=> '[role=\"hi\"]'\n   *     selectify('.btn')  //=> '.btn'\n   */\n\n  onmount.selectify = function selectify (selector) {\n    if (selector[0] === '@') {\n      return '[role~=\"' + selector.substr(1).replace(/\"/g, '\\\\\"') + '\"]'\n    }\n    return selector\n  }\n\n  /**\n   * Internal: behavior class\n   */\n\n  function Behavior (selector, init, exit, options) {\n    this.id = 'b' + bid++\n    this.init = init\n    this.exit = exit\n    this.selector = onmount.selectify(selector)\n    this.loaded = [] // keep track of dom elements loaded for this behavior\n    this.key = '__onmount:' + bid // leave the state in el['__onmount:12']\n    this.detectMutate = options && options.detectMutate\n  }\n\n  /**\n   * Internal: initialize this behavior by registering itself to the internal\n   * `selectors` map. This allows you to call `onmount(selector)` later on.\n   */\n\n  Behavior.prototype.register = function () {\n    var be = this\n    var loaded = this.loaded\n    var selector = this.selector\n\n    register(selector, function () {\n      var list = query(selector)\n\n      // This is the function invoked on `onmount(selector)`.\n      // Clean up old ones (if they're not in the DOM anymore).\n      each(loaded, function (element, i) {\n        be.visitExit(element, i, list)\n      })\n\n      // Clean up new ones (if they're not loaded yet).\n      eachOf(list, function (element) {\n        be.visitEnter(element)\n      })\n    })\n  }\n\n  /**\n   * Internal: visits the element `el` and turns it on if applicable.\n   */\n\n  Behavior.prototype.visitEnter = function (el) {\n    if (el[this.key]) return\n    var options = { id: 'c' + cid, selector: this.selector }\n    if (this.init.call(el, options) !== false) {\n      if (onmount.debug) log('enter', this.selector, el)\n      el[this.key] = options\n      this.loaded.push(el)\n      cid++\n    }\n  }\n\n  /**\n   * Internal: visits the element `el` and sees if it needs its exit handler\n   * called.\n   */\n\n  Behavior.prototype.visitExit = function (el, i, list) {\n    if (!el) return\n    if (this.detectMutate) {\n      if (!has(list, el)) return this.doExit(el, i)\n    } else {\n      if (!isAttached(el)) return this.doExit(el, i)\n    }\n  }\n\n  /**\n   * Internal: calls the exit handler for the behavior for element `el` (if\n   * available), and marks the behavior/element as uninitialized.\n   */\n\n  Behavior.prototype.doExit = function (el, i) {\n    if (typeof i === 'undefined') i = this.loaded.indexOf(el)\n    this.loaded[i] = undefined\n    if (this.exit && this.exit.call(el, el[this.key]) !== false) {\n      if (onmount.debug) log('exit', this.selector, el)\n      delete el[this.key]\n    }\n  }\n\n  /**\n   * Internal: check if an element is still attached to its document.\n   */\n\n  function isAttached (el) {\n    while (el) {\n      if (el === document.documentElement) return true\n      el = el.parentElement\n    }\n  }\n\n  /**\n   * Internal: reimplementation of `$('...')`. If jQuery is available,\n   * use it (I guess to preserve IE compatibility and to enable special jQuery\n   * attribute selectors). Use with `eachOf()` or `has()`.\n   */\n\n  function query (selector, fn) {\n    if (onmount.$) return onmount.$(selector)\n    return document.querySelectorAll(selector)\n  }\n\n  /**\n   * Internal: iterates through a `query()` result.\n   */\n\n  function eachOf (list, fn) {\n    if (onmount.$) return list.each(function (i) { fn(this, i) })\n    return each(list, fn)\n  }\n\n  /**\n   * Interanl: checks if given element `el` is in the query result `list`.\n   */\n\n  function has (list, el) {\n    if (onmount.$) return list.index(el) > -1\n    return list.indexOf(el) > -1\n  }\n\n  /**\n   * Internal: registers a behavior handler for a selector.\n   */\n\n  function register (selector, fn) {\n    if (!selectors[selector]) selectors[selector] = []\n    selectors[selector].push(fn)\n    handlers.push(fn)\n  }\n\n  /**\n   * Checks if a given element `el` matches `selector`.\n   * Compare with [$.fn.is](http://api.jquery.com/is/).\n   *\n   *     var matches = require('dom101/matches');\n   *\n   *     matches(button, ':focus');\n   */\n\n  function matches (el, selector) {\n    var _matches = el.matches ||\n      el.matchesSelector ||\n      el.msMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.webkitMatchesSelector ||\n      el.oMatchesSelector\n\n    if (onmount.$) {\n      return onmount.$(el).is(selector)\n    } else if (_matches) {\n      return _matches.call(el, selector)\n    } else if (el.parentNode) {\n      // IE8 and below\n      var nodes = el.parentNode.querySelectorAll(selector)\n      for (var i = nodes.length; i--; 0) {\n        if (nodes[i] === el) return true\n      }\n      return false\n    }\n  }\n\n  /**\n   * Iterates through `list` (an array or an object). This is useful when dealing\n   * with NodeLists like `document.querySelectorAll`.\n   *\n   *     var each = require('dom101/each');\n   *     var qa = require('dom101/query-selector-all');\n   *\n   *     each(qa('.button'), function (el) {\n   *       addClass('el', 'selected');\n   *     });\n   */\n\n  function each (list, fn) {\n    var i\n    var len = list.length\n\n    if (len === +len) {\n      for (i = 0; i < len; i++) { fn(list[i], i) }\n    } else {\n      for (i in list) {\n        if (list.hasOwnProperty(i)) fn(list[i], i)\n      }\n    }\n\n    return list\n  }\n\n  /**\n   * Internal: Check if a given object is jQuery\n   */\n\n  function isjQuery ($) {\n    return typeof $ === 'function' && $.fn && $.noConflict\n  }\n\n  function isEvent (e) {\n    return typeof e === 'object' && e.target\n  }\n\n  /**\n   * Internal: logging\n   */\n\n  var styles = {\n    enter: 'background-color:#dfd;font-weight:bold;color:#141',\n    exit: 'background-color:#fdd;font-weight:bold;color:#411'\n  }\n\n  if (~navigator.userAgent.indexOf('Mozilla')) {\n    log = function (type, selector, el) {\n      console.log('%c %s ', styles[type], selector, el)\n    }\n  } else {\n    log = function (type, selector, el) {\n      console.log('(onmount)', type, selector)\n    }\n  }\n\n  /*\n   * Export\n   */\n\n  onmount.reset()\n  return onmount\n}))\n"},"sourceMaps":null,"error":null,"hash":"002bc133a39a64730c8ff9e430d4dda9","cacheData":{"env":{}}}