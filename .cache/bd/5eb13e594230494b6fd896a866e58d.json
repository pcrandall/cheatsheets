{"id":"../node_modules/isotope-layout/js/layout-modes/masonry.js","dependencies":[{"name":"/app/package.json","includedInParent":true,"mtime":1598803809693},{"name":"/app/.babelrc","includedInParent":true,"mtime":1598803808957},{"name":"/app/node_modules/isotope-layout/package.json","includedInParent":true,"mtime":1598805133070},{"name":"../layout-mode","loc":{"line":20,"column":14},"parent":"/app/node_modules/isotope-layout/js/layout-modes/masonry.js","resolved":"/app/node_modules/isotope-layout/js/layout-mode.js"},{"name":"masonry-layout","loc":{"line":21,"column":14},"parent":"/app/node_modules/isotope-layout/js/layout-modes/masonry.js","resolved":"/app/node_modules/masonry-layout/masonry.js"}],"generated":{"js":"var define;\n/*!\n * Masonry layout mode\n * sub-classes Masonry\n * https://masonry.desandro.com\n */\n\n( function( window, factory ) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n        '../layout-mode',\n        'masonry-layout/masonry'\n      ],\n      factory );\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      require('../layout-mode'),\n      require('masonry-layout')\n    );\n  } else {\n    // browser global\n    factory(\n      window.Isotope.LayoutMode,\n      window.Masonry\n    );\n  }\n\n}( window, function factory( LayoutMode, Masonry ) {\n'use strict';\n\n// -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var MasonryMode = LayoutMode.create('masonry');\n\n  var proto = MasonryMode.prototype;\n\n  var keepModeMethods = {\n    _getElementOffset: true,\n    layout: true,\n    _getMeasurement: true\n  };\n\n  // inherit Masonry prototype\n  for ( var method in Masonry.prototype ) {\n    // do not inherit mode methods\n    if ( !keepModeMethods[ method ] ) {\n      proto[ method ] = Masonry.prototype[ method ];\n    }\n  }\n\n  var measureColumns = proto.measureColumns;\n  proto.measureColumns = function() {\n    // set items, used if measuring first item\n    this.items = this.isotope.filteredItems;\n    measureColumns.call( this );\n  };\n\n  // point to mode options for fitWidth\n  var _getOption = proto._getOption;\n  proto._getOption = function( option ) {\n    if ( option == 'fitWidth' ) {\n      return this.options.isFitWidth !== undefined ?\n        this.options.isFitWidth : this.options.fitWidth;\n    }\n    return _getOption.apply( this.isotope, arguments );\n  };\n\n  return MasonryMode;\n\n}));\n"},"sourceMaps":null,"error":null,"hash":"a1136c269c954c9fe7e32c592f8f7751","cacheData":{"env":{}}}